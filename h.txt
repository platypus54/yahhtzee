
        function renderSection(sectionEl, categories, offset) {
            sectionEl.innerHTML = "";
            categories.forEach((category, index) => {
                const rowIndex = index + offset;
                const row = document.createElement("tr");
                row.classList.toggle("selected", scores[rowIndex].selected);

                row.innerHTML = `
                    <td>${category}</td>
                    <td>${scores[rowIndex].score}</td>
                    <td>${scores[rowIndex].selected ? "Yes" : "No"}</td>
                    <td>
                        <button onclick="updateScore(${rowIndex})" ${scores[rowIndex].selected ? "disabled" : ""}>
                            ${scores[rowIndex].selected ? "Locked" : "Enter Score"}
                        </button>
                    </td>
                `;
                sectionEl.appendChild(row);
            });
        }

        function updateScore(index) {
            const categoryName = index < upperCategories.length 
                ? upperCategories[index] 
                : lowerCategories[index - upperCategories.length];
            const newScore = prompt(`Enter score for ${categoryName}:`);
            if (!isNaN(newScore) && newScore !== null) {
                scores[index].score = parseInt(newScore, 10);
                scores[index].selected = true;
                renderAllSections();
            }
        }

        function calculateTotals() {
            const upperScores = scores.slice(0, upperCategories.length);
            const lowerScores = scores.slice(upperCategories.length);

            const upperTotal = upperScores.reduce((sum, item) => sum + item.score, 0);
            const lowerTotal = lowerScores.reduce((sum, item) => sum + item.score, 0);
            const bonus = upperTotal >= 63 ? 35 : 0;

            upperTotalEl.textContent = upperTotal;
            upperBonusEl.textContent = bonus;
            lowerTotalEl.textContent = lowerTotal;
            grandTotalEl.textContent = upperTotal + bonus + lowerTotal;
        }

        function renderDice() {
            diceContainer.innerHTML = "";
            dice.forEach((value, index) => {
                const die = document.createElement("div");
                die.className = "dice";
                if (heldDice[index]) die.classList.add("held");
                die.textContent = value;
                die.onclick = () => toggleHold(index);
                diceContainer.appendChild(die);
            });
        }

        function rollDice() {
            dice = dice.map((value, index) => (heldDice[index] ? value : Math.floor(Math.random() * 6) + 1));
            renderDice();
        }

        function toggleHold(index) {
            heldDice[index] = !heldDice[index];
            renderDice();
        }

        function renderAllSections() {
            renderSection(upperSection, upperCategories, 0);
            renderSection(lowerSection, lowerCategories, upperCategories.length);
            calculateTotals();
        }
